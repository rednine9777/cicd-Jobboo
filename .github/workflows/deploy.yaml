name: deploy
on: 
  workflow_run:
    workflows: ["Pytest"]
    types:
      - completed

# 필요한 환경 변수 선언:
# AWS_REGION: AWS 서비스가 위치한 지역
# AWS_TAG_NAME: EC2 인스턴스 및 보안 그룹에 사용되는 태그 이름
# INSTANCE_STATE_NAME: 인스턴스의 상태 (예: running)
# PORT: SSH 포트 번호
env:
  AWS_REGION: ap-northeast-2
  AWS_TAG_NAME: job-boo
  INSTANCE_STATE_NAME: running
  PORT: 22

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      # GitHub Actions 러너의 IP를 가져오는 작업
      - name: Get GitHub Actions Runner IP
        id: runner_ip
        uses: haythem/public-ip@v1.2

      # AWS 자격 증명 설정
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 러너 IP로 EC2 보안 그룹 인바운드 규칙 추가
      - name: Add GitHub Actions IP to Security Group
        run: |
          SG_ID=$(aws ec2 describe-security-groups --filters Name=tag:Name,Values="${{ env.AWS_TAG_NAME }}" --query 'SecurityGroups[0].GroupId' --output text)
          echo "Security Group ID: $SG_ID"
          aws ec2 authorize-security-group-ingress \
            --group-id $SG_ID \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.runner_ip.outputs.ipv4 }}/32
      
      # 22번 포트 관련 보안 그룹 규칙을 확인하고 출력
      - name: Check Security Group Port 22 Rule
        run: |
          SG_ID=$(aws ec2 describe-security-groups --filters Name=tag:Name,Values="${{ env.AWS_TAG_NAME }}" --query 'SecurityGroups[0].GroupId' --output text)
          echo "Security Group ID: $SG_ID"
          aws ec2 describe-security-groups \
            --group-ids $SG_ID \
            --query "SecurityGroups[*].IpPermissions[?ToPort==\`22\`]" \
            --output json

      # EC2 인스턴스 ID 및 Public IP 가져오기
      - name: Get EC2 Instance ID and Public IP
        id: get_instance
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=${{ env.AWS_TAG_NAME }}" "Name=instance-state-name,Values=${{ env.INSTANCE_STATE_NAME }}" --query "Reservations[0].Instances[0].InstanceId" --output text)
          IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          echo "IP=$IP" >> $GITHUB_ENV



      # GitHub Actions 러너에서 .env 파일 생성
      - name: Create .env file from secrets
        run: |
          mkdir -p config
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" > config/.env
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> config/.env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> config/.env
          echo "MYSQL_HOST=${{ secrets.MYSQL_HOST }}" >> config/.env
          echo "MYSQL_PORT=${{ secrets.MYSQL_PORT }}" >> config/.env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> config/.env
          cat config/.env
          pwd
          ls

      # .env 파일을 EC2로 전송 (scp 사용)
      - name: Upload .env to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.IP }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          source: "./config/.env"
          target: "/home/ubuntu/"
          debug: true

      # SSH를 통해 서버로 배포
      - name: Deploy to Server
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ env.IP }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          port: ${{ env.PORT }}
          script: |
            git config --global credential.helper store
            echo "https://${{ secrets.PAT_TOKEN }}:x-oauth-basic@github.com" > ~/.git-credentials

            OWNER=$(echo ${{ github.repository }} | cut -d'/' -f1)
            REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2)

            if [ ! -d "$OWNER-$REPO_NAME" ]; then
              git clone https://github.com/${{ github.repository }}.git $OWNER-$REPO_NAME
              cd $OWNER-$REPO_NAME
            else
              cd $OWNER-$REPO_NAME
              git pull
            fi

            echo "--- 현재 경로 확인 ---"
            pwd

            mkdir -p /home/ubuntu/$OWNER-$REPO_NAME/config
            mv /home/ubuntu/config/.env /home/ubuntu/$OWNER-$REPO_NAME/config/.env

            docker-compose build
            docker-compose down
            docker-compose up -d

      # 배포 완료 후 보안 그룹에서 GitHub Actions 러너의 IP 제거
      - name: Remove GitHub Actions IP from Security Group
        if: always()
        run: |
          SG_ID=$(aws ec2 describe-security-groups --filters Name=tag:Name,Values="${{ env.AWS_TAG_NAME }}" --query 'SecurityGroups[0].GroupId' --output text)
          aws ec2 revoke-security-group-ingress \
            --group-id $SG_ID \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.runner_ip.outputs.ipv4 }}/32
