name: deploy
on: 
  workflow_run:
    workflows: ["Pytest"]
    types:
      - completed

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Get EC2 Instance ID and Public IP
        id: get_instance
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=job-boo" "Name=instance-state-name,Values=running" --query "Reservations[0].Instances[0].InstanceId" --output text)
          IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          echo "IP=$IP" >> $GITHUB_ENV

      # GitHub Actions 러너에서 .env 파일 생성
      - name: Create .env file from secrets
        run: |
          mkdir -p config
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" > config/.env
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> config/.env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> config/.env
          echo "MYSQL_HOST=${{ secrets.MYSQL_HOST }}" >> config/.env
          echo "MYSQL_PORT=${{ secrets.MYSQL_PORT }}" >> config/.env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> config/.env
          cat config/.env
          pwd
          ls

      # .env 파일을 EC2로 전송 (scp 사용)
      - name: Upload .env to EC2
        uses: appleboy/scp-action@master
        with:
            host: ${{ env.IP }}
            username: ubuntu
            key: ${{ secrets.KEY }}
            port: 22
            source: "./config/.env"
            target: "/home/ubuntu/"
            debug: true
            
        

      - name: Deploy to Server
        uses: appleboy/ssh-action@v0.1.8
        with:
            host: ${{ env.IP }}
            username: ubuntu
            key: ${{ secrets.KEY }}
            port: 22
            script: |
              # PAT 토큰을 사용하여 Git 인증 설정
              git config --global credential.helper store
              echo "https://${{ secrets.PAT_TOKEN }}:x-oauth-basic@github.com" > ~/.git-credentials

              # GitHub 환경 변수로 오너와 저장소 이름을 추출하여 디렉토리 이름으로 사용
              OWNER=$(echo ${{ github.repository }} | cut -d'/' -f1)
              REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2)

              # OWNER-REPO_NAME 디렉토리가 없으면 Git 저장소 클론, 있으면 디렉토리로 이동 후 pull
              if [ ! -d "$OWNER-$REPO_NAME" ]; then
                  git clone https://github.com/${{ github.repository }}.git $OWNER-$REPO_NAME
                  cd $OWNER-$REPO_NAME
              else
                  cd $OWNER-$REPO_NAME
                  git pull
              fi
              
              # 현재 경로 확인
              echo "--- 현재 경로 확인 ---"
              pwd

              # .env 파일을 Docker Compose 경로로 이동
              mv /home/ubuntu/config/.env /home/ubuntu/$OWNER-$REPO_NAME/config/.env  # 새로운 절대 경로로 수정

              # 디렉토리 안에서 Docker Compose 빌드 및 서비스 배포
              docker-compose build
              docker-compose down
              docker-compose up -d
